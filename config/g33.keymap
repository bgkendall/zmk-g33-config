/*
* Copyright (c) 2023 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/* Layers */
#define L_CMAK 0
#define L_QWER 1
#define L_FUNC 2
#define L_NAVI 3
#define L_NUMB 4
#define L_NUML 5
#define L_NUMX 6
#define L_META 7
//#define L_FEAX 2

/* Option Symbols */
#define LDQUO   RA(LBKT)
#define RDQUO   RA(LBRC)
#define LSQUO   RA(RBKT)
#define RSQUO   RA(RBRC)
#define NDASH   RA(MINUS)
#define MDASH   RA(UNDER)
#define ELLIP   RA(SEMI)

/* Modifiers */
#define M_ALL   LG(LA(LCTRL))
#define M_ARR   RG(RA(RCTRL))

/* Shortcuts */
#define S_UNDO  LG(Z)
#define S_REDO  LS(S_UNDO)
#define S_CUT   LG(X)
#define S_COPY  LG(C)
#define S_PAST  LG(V)
#define S_SAVE  LG(S)
#define S_SHOT  RG(DOLLAR)
#define S_TIMER RG(RA(RC(F10)))

/* Shorter Number Pad Codes */
#define P1      KP_NUMBER_1
#define P2      KP_NUMBER_2
#define P3      KP_NUMBER_3
#define P4      KP_NUMBER_4
#define P5      KP_NUMBER_5
#define P6      KP_NUMBER_6
#define P7      KP_NUMBER_7
#define P8      KP_NUMBER_8
#define P9      KP_NUMBER_9
#define P0      KP_NUMBER_0
#define PPLUS   KP_PLUS
#define PMIN    KP_MINUS
#define PMULT   KP_MULTIPLY
#define PDIV    KP_DIVIDE
#define PEQL    KP_EQUAL
#define PDOT    KP_DOT


&mt {
    flavor = "balanced";
    tapping_term_ms = <175>;
};

/ {
    behaviors {

        bsdel: backsp_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSP_DEL";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <MOD_LSFT>;
        };
        comlp: comma_paren {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_PAREN";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp LPAR>;
            mods = <MOD_LSFT>;
        };
        dotrp: dot_paren {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_PAREN";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp RPAR>;
            mods = <MOD_LSFT>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            layers = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_minus {
            timeout-ms = <50>;
            key-positions = <8 9>;
            layers = <0 1>;
            bindings = <&kp MINUS>;
        };
        combo_capsword {
            timeout-ms = <50>;
            key-positions = <20 21>;
            layers = <0 1>;
            bindings = <&caps_word>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <28 29>;
            layers = <0 1>;
            bindings = <&kp EQUAL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Layer_ColeMAK {
            bindings = <
                &kp Q       &kp W       &kp D       &kp P       &kp F       &kp J       &kp L       &kp O       &kp Y       &bsdel
                &mt LCTRL A &mt LALT R  &mt LGUI S  &mt LSHFT T &kp G       &kp M       &mt RSHFT N &mt RGUI E  &mt RALT I  &mt RCTRL U
                &mt LSHFT Z &kp X       &kp C       &kp V       &kp B       &kp K       &kp H       &comlp      &dotrp      &bootloader
                                                    &lt L_FUNC TAB  &lt L_NAVI SPACE    &lt L_NUMB RETURN
            >;
        };

        Layer_QWERty {
            bindings = <
                &kp Q       &kp W       &kp E       &kp R       &kp T       &kp Y       &kp U       &kp I       &kp O       &kp P
                &kp A       &kp S       &kp D       &kp F       &kp G       &kp H       &kp J       &kp K       &kp L       &kp SEMI
                &mt LSHFT Z &kp X       &kp C       &kp V       &kp B       &kp N       &kp M       &kp COMMA   &kp DOT     &kp ESC
                                                    &lt L_FUNC TAB  &lt L_NAVI SPACE    &lt L_NUMB RETURN
            >;
        };

        Layer_FUNCtion {
            bindings = <
                &kp K_WWW   &kp K_WWW   &kp F3      &kp LSQUO   &kp F5      &kp F6      &kp AMPS    &kp ASTRK   &kp S_REDO  &kp F10
                &kp LDQUO   &kp RDQUO   &kp S_SAVE  &kp RSQUO   &kp AT      &kp MDASH   &kp NDASH   &kp ELLIP   &kp PIPE    &kp CARET
                &kp S_UNDO  &kp S_CUT   &kp S_COPY  &kp S_PAST  &none       &kp GRAVE   &kp HASH    &kp BSLH    &kp FSLH    &kp CAPS
                                                    &trans          &trans              &mo 0
            >;
        };

        Layer_NAVIgation {
            bindings = <
                &kp TAB &kp LC(LS(TAB)) &kp UP      &kp LC(TAB) &kp HOME    &kp PG_UP   &kp TILDE   &kp N0      &kp N0      &kp EQUAL
                &kp GRAVE   &kp LEFT    &kp DOWN    &kp RIGHT   &kp END     &kp PG_DN   &kp RSHIFT  &kp RGUI    &kp RALT    &kp RCTRL
               &mt LSHFT N2 &kp N4      &kp M_ALL   &kp INSERT  &kp LBRC    &kp RBRC    &kp FSLH    &none       &none       &to 0
                                                    &kp LGUI        &trans              &kp RETURN
            >;
        };

        Layer_NUMBer {
            bindings = <
                &kp DQT     &kp P7      &kp P8      &kp P9      &kp PMIN    &kp PRCNT   &kp AMPS    &kp PMULT   &kp PDIV    &bsdel
                &kp SQT     &kp P4      &kp P5      &kp P6      &kp PPLUS   &kp LBKT    &kp TILDE   &kp DLLR    &kp PIPE    &tog L_NUMB
                &lt 0 PEQL  &kp P1      &kp P2      &kp P3      &kp KP_DOT  &kp LT      &kp HASH    &kp QMARK   &kp EXCL    &trans
                                                    &lt 0 P0        &kp KP_ENTER        &trans
            >;
        };
    };
};
